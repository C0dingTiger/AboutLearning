Git Tutorial：


Working Directory  ======= git add ========> { Staging Area  ========== git commit =========> Git Repository }  ======git push=====> Remote Repository



issues dealer:
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，使用版本回退，不过前提是没有推送到远程库。
		git log --oneline:    to check past versions
		git reflog:  to check all version including the later versions
		git reset --hard HEAD


Branch:
	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>或者git switch <name>

	创建+切换分支：git checkout -b <name>或者git switch -c <name>

	合并某分支到当前分支：git merge <name>
		eg：master合并dev: $ git merge dev
			dev update latest master： $ git merge master

	删除分支：git branch -d <name>


分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：

	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
		eg： $ git merge --no-ff -m "merge with no-ff" dev


Bugs 修复：
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时(改了一部分代码还没有add什么的)，先把工作现场git stash一下，然后去修复bug，修复后，用git stash list命令查看，再git stash pop，回到工作现场；

		$ git stash list
		stash@{0}: WIP on dev: f52c633 add merge

		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
		另一种方式是用git stash pop，恢复的同时把stash内容也删了：
		$ git stash pop
		On branch dev
		Changes to be committed:
		  (use "git reset HEAD <file>..." to unstage)

			new file:   hello.py

		Changes not staged for commit:
		  (use "git add <file>..." to update what will be committed)
		  (use "git checkout -- <file>..." to discard changes in working directory)

			modified:   readme.txt

		Dropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)

	在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

Feature Branch：
	软件开发中，总有无穷无尽的新的功能要不断添加进来。

	添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。

	开发一个新feature，最好新建一个分支；

	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作：
	当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
	$ git remote
	$ git remote -v	

	推送本地分支上远程repository：
		推送本地master：$ git push <remote> <branch>
		$ git push origin master
		
		推送本地dev:$ git push origin dev

	如何判断推送哪个分支：
		-master分支是主分支，因此要时刻与远程同步；

		-dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

		-bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

		-feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

	多人协作的工作模式通常是这样：
		1. 首先，可以试图用git push origin <branch-name>推送自己的修改；

		2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

		3. 如果合并有冲突，则解决冲突，并在本地提交；

		4. 没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

		5. 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

Rebase：
	适用情况：多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。
		当自己的code领先于origin时，pull回本地，可直接添加到origin版本timeline的尾部


	rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。
	$ git rebase

	将本其余分支merge到本branch上：
	$ git rebase <other branch name>


Tags：
	创建tag
		1. 命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

		2. 命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
			还可以给过去版本重新添加tag： $ git tag <tagname> <commitVersion>

		3. 命令git tag可以查看所有标签。标签不是按时间顺序列出，而是按字母排序的。

		4.用命令git show <tagname>可以看到details

	删除tag：
		命令git push origin <tagname>可以推送一个本地标签；

		命令git push origin --tags可以推送全部未推送过的本地标签；

		命令git tag -d <tagname>可以删除一个本地标签；

		命令git push origin :refs/tags/<tagname>可以删除一个远程标签。