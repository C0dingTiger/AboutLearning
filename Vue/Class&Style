操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 v-bind 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。

1. 绑定 HTML Class
——对象语法
	可以传给 v-bind:class 一个对象，以动态地切换 class：
	<div v-bind:class="{ active: isActive }"></div>
	上面的语法表示 active 这个 class 存在与否将取决于数据 property isActive 的 truthiness。


——数组语法
	可以把一个数组传给 v-bind:class，以应用一个 class 列表：

	<div v-bind:class="[activeClass, errorClass]"></div>

	data: {
	  activeClass: 'active',
	  errorClass: 'text-danger'
	}

	渲染为：

	<div class="active text-danger"></div>

	如果你也想根据条件切换列表中的 class，可以用三元表达式：

	<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div>

	这样写将始终添加 errorClass，但是只有在 isActive 是 truthy[1] 时才添加 activeClass。

	不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：

	<div v-bind:class="[{ active: isActive }, errorClass]"></div>



2. 绑定内联样式
——对象语法
	v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：

	<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>

	data: {
	  activeColor: 'red',
	  fontSize: 30
	}

	===>
	<div v-bind:style="styleObject"></div>

	data: {
	  styleObject: {
	    color: 'red',
	    fontSize: '13px'
	  }
	}

——数组语法
	v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上：

	<div v-bind:style="[baseStyles, overridingStyles]"></div>

——自动添加前缀
	当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS property 时，如 transform，Vue.js 会自动侦测并添加相应的前缀。